from ftplib import FTP_TLS
import ssl
import tempfile
from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.primitives.serialization import pkcs12
from cryptography.hazmat.backends import default_backend

# Load cert and key from .p12
with open("legacy.p12", "rb") as f:
    p12_data = f.read()

private_key, certificate, _ = pkcs12.load_key_and_certificates(
    p12_data, b"your_password", backend=default_backend()
)

# Write to temp files
with tempfile.NamedTemporaryFile(delete=False, suffix=".pem") as cert_file, \
     tempfile.NamedTemporaryFile(delete=False, suffix=".key") as key_file:
    
    cert_file.write(certificate.public_bytes(encoding=serialization.Encoding.PEM))
    key_file.write(private_key.private_bytes(
        encoding=serialization.Encoding.PEM,
        format=serialization.PrivateFormat.TraditionalOpenSSL,
        encryption_algorithm=serialization.NoEncryption()
    ))

# Setup FTPS connection
context = ssl.create_default_context()
context.load_cert_chain(certfile=cert_file.name, keyfile=key_file.name)

ftps = FTP_TLS(context=context)
ftps.connect("ftps.yourdomain.com", 21)
ftps.login()  # Sometimes empty string if cert-based
ftps.prot_p()  # Switch to secure data connection
files = ftps.nlst()
print("Files:", files)
ftps.quit()
