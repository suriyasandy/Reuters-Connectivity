import ssl
import requests
import urllib3
from OpenSSL import crypto
from urllib3 import poolmanager

class SSLAdapter(requests.adapters.HTTPAdapter):
    def __init__(self, ssl_context=None, **kwargs):
        self.ssl_context = ssl_context
        super().__init__(**kwargs)

    def init_poolmanager(self, *args, **kwargs):
        kwargs['ssl_context'] = self.ssl_context
        self.poolmanager = poolmanager.PoolManager(*args, **kwargs)

def create_ssl_context_from_p12(p12_path, p12_password):
    # Load the .p12 certificate
    with open(p12_path, 'rb') as p12_file:
        p12_data = p12_file.read()
    p12 = crypto.load_pkcs12(p12_data, p12_password.encode())

    # Extract key and cert
    cert = crypto.dump_certificate(crypto.FILETYPE_PEM, p12.get_certificate())
    key = crypto.dump_privatekey(crypto.FILETYPE_PEM, p12.get_privatekey())

    # Create an SSLContext with cert and key
    context = ssl.create_default_context()
    context.load_cert_chain(certfile=ssl.MemoryBIO(cert), keyfile=ssl.MemoryBIO(key))
    return context

# Provide path and password
p12_file_path = 'path/to/your/legacy.p12'
p12_password = 'your_password'

# Create custom SSL context
ssl_context = create_ssl_context_from_p12(p12_file_path, p12_password)

# Use in requests session
session = requests.Session()
session.mount('https://', SSLAdapter(ssl_context))

# Now make a request
response = session.get('https://your-secure-url.com')
print(response.status_code)
print(response.text)

from OpenSSL import crypto

with open("your.p12", "rb") as f:
    p12_data = f.read()

p12 = crypto.load_pkcs12(p12_data, b"your_password")
print("âœ… Successfully loaded .p12")
